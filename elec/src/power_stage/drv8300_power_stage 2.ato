import Resistor from "generics/resistors.ato"
import Capacitor from "generics/capacitors.ato"
import DRV8300DRGER from "DRV8300DRGER.ato"
import CurrentSense from "current_sense.ato"
import VoltageReference from "voltage_reference.ato"
import PhaseControl from "generic_power_stage.ato"
import GenericPowerStage from "generic_power_stage.ato"
import GenericHalfBridge from "generic_power_stage.ato"
import BulkCapacitance from "generic_power_stage.ato"
import DMT3009LDT_7 from "DMT3009LDT_7.ato"
import BLDC_3PWM from "generics/interfaces.ato"
import Power from "generics/interfaces.ato"

component _Resistor0402 from Resistor:
    footprint = "R0402"

component _GateResistor from _Resistor0402:
    # these resistors are used to limit gate current
    # this calculation should be embedded, however, bare with me
    # If we're running 8V vcc_gate, and have a 750mA gate drive current limit
    # we should have a 8/0.75 = 10.6 ohm resistor
    # There's also ~1Ohm of resistance on the FETs themselves, so I'm rounding down to 10Ohm
    value = 10ohm +/- 10%

component _BootstrapCap from Capacitor:
    value = 1uF +/- 20%
    footprint = "C0402"

# private half-bridge type that includes everything we need to repeat
module _Phase:
    signal vcc_pwr
    signal vcc_3v3
    signal gnd
    power_vin = new Power
    power_3v3 = new Power
    vcc_pwr ~ power_vin.vcc
    vcc_3v3 ~ power_3v3.vcc
    gnd ~ power_vin.gnd
    gnd ~ power_3v3.gnd

    ctrl = new PhaseControl
    signal i_fb_zero
    signal out
    signal bs

    _hb = new DMT3009LDT_7

    _r_gate_high = new _GateResistor
    _r_gate_high.p1 ~ _hb.high_gate
    _r_gate_high.p2 ~ ctrl.high
    _hb.vcc_pwr ~ vcc_pwr

    _r_gate_low = new _GateResistor
    _r_gate_low.p1 ~ _hb.low_gate
    _r_gate_low.p2 ~ ctrl.low

    _i_sense = new CurrentSense
    _hb.gnd ~ _i_sense.i_in
    _i_sense.i_out ~ gnd

    _i_sense.vcc ~ vcc_3v3
    _i_sense.gnd ~ gnd

    _i_sense.v_ref ~ i_fb_zero
    _i_sense.out ~ ctrl.i_fb

    bs_cap = new _BootstrapCap
    bs ~ bs_cap.p1
    bs_cap.p2 ~ out
    _hb.out ~ out

module DRV8300PowerStage from GenericPowerStage:
    drv8300 = new DRV8300DRGER
    vcc_gate ~ drv8300.GVDD
    gnd ~ drv8300.GND
    gnd ~ drv8300.EP

    power_vin = new Power
    vcc_pwr ~ power_vin.vcc
    gnd ~ power_vin.gnd

    power_gate = new Power
    power_gate.gnd ~ gnd
    power_gate.vcc ~ vcc_gate

    power_3v3 = new Power
    power_3v3.gnd ~ gnd
    power_3v3.vcc ~ vcc_3v3

    # configured for 3PWM mode, high and low signals tied together, INLX inverted by tieing mode to VDD
    bldc_3pwm = new BLDC_3PWM
    bldc_3pwm.phase_a ~ drv8300.INHA
    bldc_3pwm.phase_a ~ drv8300.INLA
    bldc_3pwm.phase_b ~ drv8300.INHB
    bldc_3pwm.phase_b ~ drv8300.INLB
    bldc_3pwm.phase_c ~ drv8300.INHC
    bldc_3pwm.phase_c ~ drv8300.INLC

    # set mode pin to 3PWM mode
    drv8300.MODE ~ power_3v3.vcc

    vref_1V65 = new VoltageReference
    vcc_3v3 ~ vref_1V65.vcc
    gnd ~ vref_1V65.gnd
    vref_1V65.v_ref ~ i_fb_zero

    _a = new _Phase
    power_3v3 ~ _a.power_3v3
    power_vin ~ _a.power_vin
    i_fb_zero ~ _a.i_fb_zero
    _a.out ~ out_a
    ctrl_a.i_fb ~ _a.ctrl.i_fb

    drv8300.GHA ~ _a.ctrl.high
    drv8300.GLA ~ _a.ctrl.low
    _a.out ~ drv8300.SHA
    _a.bs ~ drv8300.BSTA

    _b = new _Phase
    power_3v3 ~ _b.power_3v3
    power_vin ~ _b.power_vin
    i_fb_zero ~ _b.i_fb_zero
    _b.out ~ out_b
    ctrl_b.i_fb ~ _b.ctrl.i_fb

    drv8300.GHB ~ _b.ctrl.high
    drv8300.GLB ~ _b.ctrl.low
    _b.out ~ drv8300.SHB
    _b.bs ~ drv8300.BSTB

    _c = new _Phase
    power_3v3 ~ _c.power_3v3
    power_vin ~ _c.power_vin
    i_fb_zero ~ _c.i_fb_zero
    _c.out ~ out_c
    ctrl_c.i_fb ~ _c.ctrl.i_fb

    drv8300.GHC ~ _c.ctrl.high
    drv8300.GLC ~ _c.ctrl.low
    _c.out ~ drv8300.SHC
    _c.bs ~ drv8300.BSTC

    # deadtime config
    r_dt = new _Resistor0402
    r_dt.value = 40.2kohm +/- 10%
    r_dt.p1 ~ drv8300.DT
    r_dt.p2 ~ gnd

    # stuff that'd be nice to do at somepoint later
    # TODO: mode config pulldown
